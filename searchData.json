[{"title":"关于历史的进程于个人的奋斗","url":"/2019/05/17/The-course-of-history-and-personal-struggle/","content":"\n> 人的一生当然要靠自我奋斗，当然也要考虑历史的进程。—— 江泽民同志\n\n\n世上没有两片完全相同的树叶。也不可能有两个完全一样的人。每当遇到一些烦恼的事情，总会考虑一些奇怪的问题。\n\n人的一生。到底是自我的奋斗重要，还是历史的进程中要？\n\n人的一生当然要靠自我奋斗，当然也要考虑历史的进程。\n\n肯定并尊重他人的选择，并衷心祝福他的未来能够达到他的期望！🙂","tags":["杂记","瞎逼逼"],"categories":["杂记"]},{"title":"优雅的自定制弹窗（Vue）","url":"/2019/05/16/vue-custom-dialog-in-elegant-way/","content":"\n\n> 在网页开发中，弹窗是一种高效人机交互方式。适度的弹窗可以将有效的信息快速的展示给用户，辅助用户减少决策或操作时间。一方面可以简化操作流程，提升效率。另一方面还能降低各个组件间的耦合度。恰当封装的弹窗甚至能够有较高的复用性，避免开发过程中复制粘贴造成的代码冗余，提升代码效率。\n\n## 写在前面\n\n在讲如何优雅的实现弹窗之前，我们先大概的总结一下我们一般使用网页弹窗的场景。\n\n* 场景一：一些重要信息的展示或用户请求的主要信息展示。如：在物流管理中，快速查看物流详情的弹窗。\n* 场景二：重要操作的二次确认。如：‘确认某个<strong class='c-danger'>重要操作</strong>是否执行’\n* 场景三：包含一些简单的输入框、选择框。用于从用户获取一些简单的数据。\n* 场景四：提供一个列表，供用户按需的选择一个或多个项目。为进行接下来的业务提供数据。如：在进行用户组群管理的页面，在弹窗中选择部分用户进行分组创建的操作。\n\n这篇文章的主要提供一个基于 JavaScript ES6 语法中 `Promise / async / await` 的异步特性，来解决弹窗与主要业务组件间如何优雅的传递数据的解决方案\n\n## 怎么做\n那么我们就开始吧：\n\n1. 首先我们需要分析除去业务外，一个弹窗最基本需要的内容及方法。\n\t\n\t非必须项目：\n\t\n\t* 弹窗标题：用于提示弹窗的主要功能，主要内容。\n\t* 弹窗页脚：用于放置一些简单的操作方法，如：关闭弹窗、确定、取消等自定制操作。\n\t\n\t必须项目：\n\t\n\t* 关闭弹窗功能：用于关闭弹窗，同时可以绑定一些弹窗组件内部状态做还原处理（直接卸载弹窗组件的可以不处理）。\n\t* 开启弹窗功能：用于开启弹窗，同时可以初始化弹窗状态，特别是在父组件有动态数据传入参与弹窗初始化时十分有效。\n\t* 弹窗的主要内容区域：用于展示弹窗所需支持功能的主要内容。比如：简单的表单，可供选择的列表，主要信息的展示。\n\n2. 然后我们就能写一个简单的弹窗组件了\n\n![参考代码](/assets/images/posts/2019/5/15/vue-custom-dialog-in-elegant-way2.png)\n\n[在Github上查看](https://github.com/Leridy/leridy.github.io/blob/source/source/assets/code/2019/5/15/dialog-sample-1.vue) / [代码下载](/assets/code/2019/5/15/dialog-sample-1.vue)\n\n3. 与父组件之间的交互\n\n   与父组件的交互可以分为两种情况。\n   \n   1. 组件引入，将弹窗组件作为一个子组件直接引入至父组件中,主要用于指定页面专门的业务：\n    \n\t\t```HTML\n\t   \t\n   \t\t<template>\n   \t\t<div>\n   \t\t\t<dialog \n   \t\t\t\t:config='config'\n   \t\t\t\tref='dialog'\n   \t\t\t></dialog>\n   \t\t</div>\n   \t\t</template>\n   \t\t\n   \t\t<script>\n   \t\t\texport default {\n   \t\t\t\tname: 'p-component',\n   \t\t\t\tdata: {\n   \t\t\t\t\tconfig: {\n   \t\t\t\t\t\ttitle: '弹窗'\n   \t\t\t\t\t}\n   \t\t\t\t},\n   \t\t\t\t// ... 其他内容\n   \t\t\t\tmethods: {\n   \t\t\t\t\t/**\n   \t\t\t\t\t * 这里用于拉起弹窗的方法，在这个方法内就可以很优雅的处理弹窗与父组件之间的数据传递了\n   \t\t\t\t\t */\n   \t\t\t\t\tasync needDialog(...args) {\n   \t\t\t\t\t\tconst { refs } = this;\n   \t\t\t\t\t\ttry{\n   \t\t\t\t\t\t\tconst result = await refs.dialog.open(...args);\n   \t\t\t\t\t\t\t// 处理弹窗的异步数据\n   \t\t\t\t\t\t\thandleDialogResult(result)\n   \t\t\t\t\t\t} catch (e) {\n   \t\t\t\t\t\t\tconsole.log(e)\n   \t\t\t\t\t\t}\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t\t\n   \t\t\t}\n   \t\t</script>\n   \t \t\t\n       ```\n   \t\n   2. 作为一个独立的 Vue 组件，与 App 并列挂载在全局中，通过将 open 方法 mixin 入 App ，达到可以在所有组件内部使用 this.open() 来调用弹窗。此种使用场景较多的使用在，整个项目普遍通用简单业务来使用。效率极高。由于此方法涉及组件封装的内容，我计划单独用一篇文章来详细讲解这个过程。\n\t\n\n\n## 写在最后\n\n合理的使用弹窗，会有效的简化业务流程提升开发效率。但弹窗并不是万精油。页面中反复弹窗，极有可能给用户造成困扰而产生抵触。弹窗也并不推荐用于处理复杂业务逻辑，对于复杂的业务逻辑我更推荐使用单个页面。","tags":["前端","Vue","开发"],"categories":["WEB"]},{"title":"总有写点什么的必要","url":"/2019/05/14/it-is-necessary-to-write-something/","content":"\n\n> 我正有写一点东西的必要了 —— 鲁迅\n\n\n5月14日，杭州，🌧。\n\n去年（2018）九月，我的博客被恶意删库。18年早些时候的一些文章由于没有开启数据库备份，\n理所当然的丢失。好可惜，刚来杭州的一些面试经验总结和几篇技术博客都完全无法追回。\n\n也就是自那以后，我的博客断更。我也懒得去研究 WordPress 。所以也没有恢复网站的运行。\n\n古语有云好记性不如烂笔头，在日常开发中，常常会碰到一些小问题。记下来，不仅可以作为自己的\n知识库、也可以用于技术的分享。技术的成长也在于一点一点的累积。\n\n总有写点什么的必要。\n\n\n\n","tags":["说话"],"categories":["WEB"]},{"title":"hello","url":"/2019/05/13/hello/","content":"\n### hello\n与你相见，好久不见\n","tags":["问候"],"categories":["杂记"]}]