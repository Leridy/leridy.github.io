[{"title":"组件封装的简述 (Vue)","url":"/2019/05/22/component-packaging-Vue/","content":"\n> 这篇文章用来填我之前一片的文章[优雅的自定制弹窗（Vue）](/2019/05/16/vue-custom-dialog-in-elegant-way/)的坑\n\n我将基于自己的开发经历，从以下几个角度来距离分析一个组件的封装流程。\n1. 前期准备：\n\t1. 组件封装的必要性分析（什么情况要封装组件）\n\t2. 组件核心功能以及数据流向的分析对组件进行分类（功能型/展示型)\n\t3. 依据数据流向确定组件的挂载形式\n2. 代码片段（对各个分类的组件提出代码示例)\n\t1. 踩坑心得\n3. 各个封装方式的优缺点分析\n\n### 前期准备\n#### 1. 组件分装的必要性分析\n首先我们需要根据现实业务以及现实需求出发，依据组件封装的原则：降低耦合、提高代码复用，分析是否需要封装组件。这里了大概从我的开发实践中总结几个封装组件的情况：\n\n1. 复杂业务中需要有一个功能复杂但与主业务只是单纯数据交互的情况（比如：富文本编辑器，根据实际业务实现的选择列表等。）这些功能往往有其独特的功能点，比如独立的数据（store 或 state 以及独立的网络操作）部分，处理的业务也较为复杂，同时与主业务之间的关系却较为简单，一般为简单的数据传输/信息获取/信息输入。\n2. 较为高频的相同功能，如图书管理系统中的图书选择器，在多个图书管理场景都可以需要图书选择的功能。\n3. 简化代码降低耦合方便维护，当一个业务的代码文件大于一定限制的时候维护工作将变得格外复杂，这样我们就需要分析业务中的各个代码是否可以优化，将较为复杂的内容拆分为一个个小的组件来维护。\n\n#### 2.组件核心功能以及数据流向的分析对组件进行分类（功能型/展示型）\n根据实际的需求，我们能够明确我们在什么地方需要封装组件，封装一个什么样的组件。结合我的开发经历和对一些组件库的实现，我们大概能够从两个大方面来分类：\n\n1. 功能型：主要是为了实现一个特定的交互功能（ElementUI 中大大部分组件如 input、selector、button 等）\n2. 展示型：主要为了展示指定的内容，（ElementUI 中的 轮播图，table，message, 面包屑导航，tooltips, divider, image 等）\n3. 依据数据流向确定组件的封装和挂载形式\n\t* 单纯的数据流入且较为通用的组件,如 ElementUI 中的 message 组件，建议直接封装在通用组件库中通过在 Vue.component 方法来使用\n\t* 弹窗选择器等，轻度的数据交互。例如微信公众号后台中媒体库功能。这类使用范围较广且功能独立的组件，则建议封装成一个独立的 Vue 实例，独立于主项目挂载在页面中。通过挂载一个返回异步（Promise）对象的方法在主业务的 Vue 原型链中，来实现全局的调用和数据交互。 \n\t* 定制功能的组件，比如在线商城管理系统中，常见的商品属性配置功能的组件，建议在当前的商品编辑页面目录内建立一个组件文件夹存放此类组件。此类组件往往需要处理大量的传入信息，并返回大量的传出信息。封装此类组件往往是为了代码的维护成本考量。因此直接作为 component 引入直接在父组件（页面中使用即可）。\n\n\n### 代码片段\n虽然这篇文章鸽了很久，但是我没有代码的准备，我们能够通过阅读一些流行的组件库的源代码就能够看到大多数封装的方法。😁\n\n### 各个封装方式的优缺点分析\n\n上面我举了三种（严格来说是两种）封装和挂载形式的例子（我觉得抛开实际应用场景谈好坏有点耍流氓的意思）\n\n1. 前两种封装方法的优点，通用性较强，方便全局的使用。缺点不适合做一些复杂的界面交互和复杂的数据交互\n\n2. 最后一种的优点，提高代码的可维护性。同样也提升原有功能的可以复用性，在需要相同功能时不用 copy paste 或者写冗余代码了，缺点是适用范围有限。\n\n### 总结\n代码的封装，最显而易见的好处就是提高代码的复用率从而达到提升开发效率。除了组件的封装，我们再开发中多封装一些通用方法（工具方法），多写一些 mixin 同样能够达到事半功倍的效果。\n\n\n\n\n","tags":["前端","web","开发","vue"],"categories":["WEB"]},{"title":"Typescript与react的开发心得","url":"/2019/05/22/Typescript-react-development-practices/","content":"\n> 上周，分配到了 Typescript react 项目的开发任务。我又有机会学习新的东西啦。\n\n我将从一下几个方面来讲这次开发的心路历程，以及自己的一些观点\n\n1. 开发前\n\t1. 对 react 的观点\n\t2. 关于 Typescript 的偏见\n2. 开发时\n\t1. 对 react 及其生态的加深理解\n\t2. Typescript 的一些简单实用\n3. 开发完成后\n\t1. 复盘和总结\n\t\n##### 未完待续\n\n\n![to be continued](https://m.media-amazon.com/images/I/71NscnhYRCL._SS500_.jpg)\n","tags":["前端","web","开发","Typescript","react","umi","development"],"categories":["WEB"]},{"title":"关于历史的进程于个人的奋斗","url":"/2019/05/17/The-course-of-history-and-personal-struggle/","content":"\n> 人的一生当然要靠自我奋斗，当然也要考虑历史的进程。—— 江泽民同志\n\n\n世上没有两片完全相同的树叶。也不可能有两个完全一样的人。每当遇到一些烦恼的事情，总会考虑一些奇怪的问题。\n\n人的一生。到底是自我的奋斗重要，还是历史的进程中要？\n\n人的一生当然要靠自我奋斗，当然也要考虑历史的进程。\n\n肯定并尊重他人的选择，并衷心祝福他的未来能够达到他的期望！🙂","tags":["杂记","瞎逼逼"],"categories":["杂记"]},{"title":"优雅的自定制弹窗（Vue）","url":"/2019/05/16/vue-custom-dialog-in-elegant-way/","content":"\n\n> 在网页开发中，弹窗是一种高效人机交互方式。适度的弹窗可以将有效的信息快速的展示给用户，辅助用户减少决策或操作时间。一方面可以简化操作流程，提升效率。另一方面还能降低各个组件间的耦合度。恰当封装的弹窗甚至能够有较高的复用性，避免开发过程中复制粘贴造成的代码冗余，提升代码效率。\n\n## 写在前面\n\n在讲如何优雅的实现弹窗之前，我们先大概的总结一下我们一般使用网页弹窗的场景。\n\n* 场景一：一些重要信息的展示或用户请求的主要信息展示。如：在物流管理中，快速查看物流详情的弹窗。\n* 场景二：重要操作的二次确认。如：‘确认某个<strong class='c-danger'>重要操作</strong>是否执行’\n* 场景三：包含一些简单的输入框、选择框。用于从用户获取一些简单的数据。\n* 场景四：提供一个列表，供用户按需的选择一个或多个项目。为进行接下来的业务提供数据。如：在进行用户组群管理的页面，在弹窗中选择部分用户进行分组创建的操作。\n\n这篇文章的主要提供一个基于 JavaScript ES6 语法中 `Promise / async / await` 的异步特性，来解决弹窗与主要业务组件间如何优雅的传递数据的解决方案\n\n## 怎么做\n那么我们就开始吧：\n\n1. 首先我们需要分析除去业务外，一个弹窗最基本需要的内容及方法。\n\t\n\t非必须项目：\n\t\n\t* 弹窗标题：用于提示弹窗的主要功能，主要内容。\n\t* 弹窗页脚：用于放置一些简单的操作方法，如：关闭弹窗、确定、取消等自定制操作。\n\t\n\t必须项目：\n\t\n\t* 关闭弹窗功能：用于关闭弹窗，同时可以绑定一些弹窗组件内部状态做还原处理（直接卸载弹窗组件的可以不处理）。\n\t* 开启弹窗功能：用于开启弹窗，同时可以初始化弹窗状态，特别是在父组件有动态数据传入参与弹窗初始化时十分有效。\n\t* 弹窗的主要内容区域：用于展示弹窗所需支持功能的主要内容。比如：简单的表单，可供选择的列表，主要信息的展示。\n\n2. 然后我们就能写一个简单的弹窗组件了\n\n![参考代码](/assets/images/posts/2019/5/15/vue-custom-dialog-in-elegant-way2.png)\n\n[在Github上查看](https://github.com/Leridy/leridy.github.io/blob/source/source/assets/code/2019/5/15/dialog-sample-1.vue) / [代码下载](/assets/code/2019/5/15/dialog-sample-1.vue)\n\n3. 与父组件之间的交互\n\n   与父组件的交互可以分为两种情况。\n   \n   1. 组件引入，将弹窗组件作为一个子组件直接引入至父组件中,主要用于指定页面专门的业务：\n    \n\t\t```HTML\n\t   \t\n   \t\t<template>\n   \t\t<div>\n   \t\t\t<dialog \n   \t\t\t\t:config='config'\n   \t\t\t\tref='dialog'\n   \t\t\t></dialog>\n   \t\t</div>\n   \t\t</template>\n   \t\t\n   \t\t<script>\n   \t\t\texport default {\n   \t\t\t\tname: 'p-component',\n   \t\t\t\tdata: {\n   \t\t\t\t\tconfig: {\n   \t\t\t\t\t\ttitle: '弹窗'\n   \t\t\t\t\t}\n   \t\t\t\t},\n   \t\t\t\t// ... 其他内容\n   \t\t\t\tmethods: {\n   \t\t\t\t\t/**\n   \t\t\t\t\t * 这里用于拉起弹窗的方法，在这个方法内就可以很优雅的处理弹窗与父组件之间的数据传递了\n   \t\t\t\t\t */\n   \t\t\t\t\tasync needDialog(...args) {\n   \t\t\t\t\t\tconst { refs } = this;\n   \t\t\t\t\t\ttry{\n   \t\t\t\t\t\t\tconst result = await refs.dialog.open(...args);\n   \t\t\t\t\t\t\t// 处理弹窗的异步数据\n   \t\t\t\t\t\t\thandleDialogResult(result)\n   \t\t\t\t\t\t} catch (e) {\n   \t\t\t\t\t\t\tconsole.log(e)\n   \t\t\t\t\t\t}\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t\t\n   \t\t\t}\n   \t\t</script>\n   \t \t\t\n       ```\n   \t\n   2. 作为一个独立的 Vue 组件，与 App 并列挂载在全局中，通过将 open 方法 mixin 入 App ，达到可以在所有组件内部使用 this.open() 来调用弹窗。此种使用场景较多的使用在，整个项目普遍通用简单业务来使用。效率极高。由于此方法涉及组件封装的内容，我计划单独用一篇文章来详细讲解这个过程。\n\t\n\n\n## 写在最后\n\n合理的使用弹窗，会有效的简化业务流程提升开发效率。但弹窗并不是万精油。页面中反复弹窗，极有可能给用户造成困扰而产生抵触。弹窗也并不推荐用于处理复杂业务逻辑，对于复杂的业务逻辑我更推荐使用单个页面。","tags":["前端","开发","Vue"],"categories":["WEB"]},{"title":"总有写点什么的必要","url":"/2019/05/14/it-is-necessary-to-write-something/","content":"\n\n> 我正有写一点东西的必要了 —— 鲁迅\n\n\n5月14日，杭州，🌧。\n\n去年（2018）九月，我的博客被恶意删库。18年早些时候的一些文章由于没有开启数据库备份，\n理所当然的丢失。好可惜，刚来杭州的一些面试经验总结和几篇技术博客都完全无法追回。\n\n也就是自那以后，我的博客断更。我也懒得去研究 WordPress 。所以也没有恢复网站的运行。\n\n古语有云好记性不如烂笔头，在日常开发中，常常会碰到一些小问题。记下来，不仅可以作为自己的\n知识库、也可以用于技术的分享。技术的成长也在于一点一点的累积。\n\n总有写点什么的必要。\n\n\n\n","tags":["说话"],"categories":["WEB"]},{"title":"hello","url":"/2019/05/13/hello/","content":"\n### hello\n与你相见，好久不见\n","tags":["问候"],"categories":["杂记"]}]